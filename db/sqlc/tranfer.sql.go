// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tranfer.sql

package db

import (
	"context"
)

const createTranfer = `-- name: createTranfer :one
INSERT INTO tranfers(
    from_account_id,
    to_account_id,
    ammount
) VALUES(
    $1, $2, $3
) RETURNING id, from_account_id, to_account_id, ammount, created_at
`

type createTranferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Ammount       int64 `json:"ammount"`
}

func (q *Queries) createTranfer(ctx context.Context, arg createTranferParams) (Tranfer, error) {
	row := q.db.QueryRowContext(ctx, createTranfer, arg.FromAccountID, arg.ToAccountID, arg.Ammount)
	var i Tranfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const getTranfer = `-- name: getTranfer :one
SELECT id, from_account_id, to_account_id, ammount, created_at FROM tranfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) getTranfer(ctx context.Context, id int64) (Tranfer, error) {
	row := q.db.QueryRowContext(ctx, getTranfer, id)
	var i Tranfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const listTranfer = `-- name: listTranfer :many
SELECT id, from_account_id, to_account_id, ammount, created_at FROM tranfers
WHERE
    from_account_id = $1 OR
    to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type listTranferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) listTranfer(ctx context.Context, arg listTranferParams) ([]Tranfer, error) {
	rows, err := q.db.QueryContext(ctx, listTranfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tranfer
	for rows.Next() {
		var i Tranfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Ammount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
